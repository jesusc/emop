/*
* generated by Xtext
*/
package mop.example.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ExpAutoInstGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDeclaredValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaredValuesValueParserRuleCall_2_0 = (RuleCall)cDeclaredValuesAssignment_2.eContents().get(0);
		private final Assignment cExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionsExpressionParserRuleCall_3_0 = (RuleCall)cExpressionsAssignment_3.eContents().get(0);
		
		//Module:
		//	"program" name=ID declaredValues+=Value* expressions+=Expression+;
		public ParserRule getRule() { return rule; }

		//"program" name=ID declaredValues+=Value* expressions+=Expression+
		public Group getGroup() { return cGroup; }

		//"program"
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//declaredValues+=Value*
		public Assignment getDeclaredValuesAssignment_2() { return cDeclaredValuesAssignment_2; }

		//Value
		public RuleCall getDeclaredValuesValueParserRuleCall_2_0() { return cDeclaredValuesValueParserRuleCall_2_0; }

		//expressions+=Expression+
		public Assignment getExpressionsAssignment_3() { return cExpressionsAssignment_3; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_3_0() { return cExpressionsExpressionParserRuleCall_3_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cLiteralParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Literal;
		public ParserRule getRule() { return rule; }

		//Literal
		public RuleCall getLiteralParserRuleCall() { return cLiteralParserRuleCall; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueValueCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueValueQIDParserRuleCall_0_1 = (RuleCall)cValueValueCrossReference_0.eContents().get(1);
		
		//Literal:
		//	value=[Value|QID];
		public ParserRule getRule() { return rule; }

		//value=[Value|QID]
		public Assignment getValueAssignment() { return cValueAssignment; }

		//[Value|QID]
		public CrossReference getValueValueCrossReference_0() { return cValueValueCrossReference_0; }

		//QID
		public RuleCall getValueValueQIDParserRuleCall_0_1() { return cValueValueQIDParserRuleCall_0_1; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final RuleCall cBooleanValueParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Value:
		//	BooleanValue;
		public ParserRule getRule() { return rule; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall() { return cBooleanValueParserRuleCall; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTrueValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFalseValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BooleanValue:
		//	TrueValue | FalseValue;
		public ParserRule getRule() { return rule; }

		//TrueValue | FalseValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//TrueValue
		public RuleCall getTrueValueParserRuleCall_0() { return cTrueValueParserRuleCall_0; }

		//FalseValue
		public RuleCall getFalseValueParserRuleCall_1() { return cFalseValueParserRuleCall_1; }
	}

	public class TrueValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrueValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrueValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//TrueValue:
		//	{TrueValue} "T" name=ID;
		public ParserRule getRule() { return rule; }

		//{TrueValue} "T" name=ID
		public Group getGroup() { return cGroup; }

		//{TrueValue}
		public Action getTrueValueAction_0() { return cTrueValueAction_0; }

		//"T"
		public Keyword getTKeyword_1() { return cTKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class FalseValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FalseValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFalseValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//FalseValue:
		//	{FalseValue} "F" name=ID;
		public ParserRule getRule() { return rule; }

		//{FalseValue} "F" name=ID
		public Group getGroup() { return cGroup; }

		//{FalseValue}
		public Action getFalseValueAction_0() { return cFalseValueAction_0; }

		//"F"
		public Keyword getFKeyword_1() { return cFKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class QIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//QID:
		//	(ID ".")? ID;
		public ParserRule getRule() { return rule; }

		//(ID ".")? ID
		public Group getGroup() { return cGroup; }

		//(ID ".")?
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final ModuleElements pModule;
	private final ExpressionElements pExpression;
	private final LiteralElements pLiteral;
	private final ValueElements pValue;
	private final BooleanValueElements pBooleanValue;
	private final TrueValueElements pTrueValue;
	private final FalseValueElements pFalseValue;
	private final QIDElements pQID;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpAutoInstGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModule = new ModuleElements();
		this.pExpression = new ExpressionElements();
		this.pLiteral = new LiteralElements();
		this.pValue = new ValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pTrueValue = new TrueValueElements();
		this.pFalseValue = new FalseValueElements();
		this.pQID = new QIDElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mop.example.xtext.ExpAutoInst".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Module:
	//	"program" name=ID declaredValues+=Value* expressions+=Expression+;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//Expression:
	//	Literal;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Literal:
	//	value=[Value|QID];
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//Value:
	//	BooleanValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//BooleanValue:
	//	TrueValue | FalseValue;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//TrueValue:
	//	{TrueValue} "T" name=ID;
	public TrueValueElements getTrueValueAccess() {
		return pTrueValue;
	}
	
	public ParserRule getTrueValueRule() {
		return getTrueValueAccess().getRule();
	}

	//FalseValue:
	//	{FalseValue} "F" name=ID;
	public FalseValueElements getFalseValueAccess() {
		return pFalseValue;
	}
	
	public ParserRule getFalseValueRule() {
		return getFalseValueAccess().getRule();
	}

	//QID:
	//	(ID ".")? ID;
	public QIDElements getQIDAccess() {
		return pQID;
	}
	
	public ParserRule getQIDRule() {
		return getQIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
