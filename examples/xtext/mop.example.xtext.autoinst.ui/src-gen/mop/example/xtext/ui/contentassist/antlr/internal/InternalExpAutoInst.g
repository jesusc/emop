/*
* generated by Xtext
*/
grammar InternalExpAutoInst;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package mop.example.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package mop.example.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import mop.example.xtext.services.ExpAutoInstGrammarAccess;

}

@parser::members {
 
 	private ExpAutoInstGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ExpAutoInstGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModule
entryRuleModule 
:
{ before(grammarAccess.getModuleRule()); }
	 ruleModule
{ after(grammarAccess.getModuleRule()); } 
	 EOF 
;

// Rule Module
ruleModule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModuleAccess().getGroup()); }
(rule__Module__Group__0)
{ after(grammarAccess.getModuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getLiteralParserRuleCall()); }
	ruleLiteral
{ after(grammarAccess.getExpressionAccess().getLiteralParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getValueAssignment()); }
(rule__Literal__ValueAssignment)
{ after(grammarAccess.getLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getBooleanValueParserRuleCall()); }
	ruleBooleanValue
{ after(grammarAccess.getValueAccess().getBooleanValueParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanValue
entryRuleBooleanValue 
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanValueAccess().getAlternatives()); }
(rule__BooleanValue__Alternatives)
{ after(grammarAccess.getBooleanValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTrueValue
entryRuleTrueValue 
:
{ before(grammarAccess.getTrueValueRule()); }
	 ruleTrueValue
{ after(grammarAccess.getTrueValueRule()); } 
	 EOF 
;

// Rule TrueValue
ruleTrueValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTrueValueAccess().getGroup()); }
(rule__TrueValue__Group__0)
{ after(grammarAccess.getTrueValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFalseValue
entryRuleFalseValue 
:
{ before(grammarAccess.getFalseValueRule()); }
	 ruleFalseValue
{ after(grammarAccess.getFalseValueRule()); } 
	 EOF 
;

// Rule FalseValue
ruleFalseValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFalseValueAccess().getGroup()); }
(rule__FalseValue__Group__0)
{ after(grammarAccess.getFalseValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQID
entryRuleQID 
:
{ before(grammarAccess.getQIDRule()); }
	 ruleQID
{ after(grammarAccess.getQIDRule()); } 
	 EOF 
;

// Rule QID
ruleQID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQIDAccess().getGroup()); }
(rule__QID__Group__0)
{ after(grammarAccess.getQIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__BooleanValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getTrueValueParserRuleCall_0()); }
	ruleTrueValue
{ after(grammarAccess.getBooleanValueAccess().getTrueValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBooleanValueAccess().getFalseValueParserRuleCall_1()); }
	ruleFalseValue
{ after(grammarAccess.getBooleanValueAccess().getFalseValueParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Module__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__0__Impl
	rule__Module__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getProgramKeyword_0()); }

	'program' 

{ after(grammarAccess.getModuleAccess().getProgramKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__1__Impl
	rule__Module__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getNameAssignment_1()); }
(rule__Module__NameAssignment_1)
{ after(grammarAccess.getModuleAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__2__Impl
	rule__Module__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getDeclaredValuesAssignment_2()); }
(rule__Module__DeclaredValuesAssignment_2)*
{ after(grammarAccess.getModuleAccess().getDeclaredValuesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getModuleAccess().getExpressionsAssignment_3()); }
(rule__Module__ExpressionsAssignment_3)
{ after(grammarAccess.getModuleAccess().getExpressionsAssignment_3()); }
)
(
{ before(grammarAccess.getModuleAccess().getExpressionsAssignment_3()); }
(rule__Module__ExpressionsAssignment_3)*
{ after(grammarAccess.getModuleAccess().getExpressionsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TrueValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TrueValue__Group__0__Impl
	rule__TrueValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrueValueAccess().getTrueValueAction_0()); }
(

)
{ after(grammarAccess.getTrueValueAccess().getTrueValueAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TrueValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TrueValue__Group__1__Impl
	rule__TrueValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrueValueAccess().getTKeyword_1()); }

	'T' 

{ after(grammarAccess.getTrueValueAccess().getTKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TrueValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TrueValue__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrueValueAccess().getNameAssignment_2()); }
(rule__TrueValue__NameAssignment_2)
{ after(grammarAccess.getTrueValueAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FalseValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FalseValue__Group__0__Impl
	rule__FalseValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFalseValueAccess().getFalseValueAction_0()); }
(

)
{ after(grammarAccess.getFalseValueAccess().getFalseValueAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FalseValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FalseValue__Group__1__Impl
	rule__FalseValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFalseValueAccess().getFKeyword_1()); }

	'F' 

{ after(grammarAccess.getFalseValueAccess().getFKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FalseValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FalseValue__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFalseValueAccess().getNameAssignment_2()); }
(rule__FalseValue__NameAssignment_2)
{ after(grammarAccess.getFalseValueAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QID__Group__0__Impl
	rule__QID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQIDAccess().getGroup_0()); }
(rule__QID__Group_0__0)?
{ after(grammarAccess.getQIDAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQIDAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getQIDAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QID__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QID__Group_0__0__Impl
	rule__QID__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQIDAccess().getIDTerminalRuleCall_0_0()); }
	RULE_ID
{ after(grammarAccess.getQIDAccess().getIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QID__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QID__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QID__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQIDAccess().getFullStopKeyword_0_1()); }

	'.' 

{ after(grammarAccess.getQIDAccess().getFullStopKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Module__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__DeclaredValuesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getDeclaredValuesValueParserRuleCall_2_0()); }
	ruleValue{ after(grammarAccess.getModuleAccess().getDeclaredValuesValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__ExpressionsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getExpressionsExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getModuleAccess().getExpressionsExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueValueCrossReference_0()); }
(
{ before(grammarAccess.getLiteralAccess().getValueValueQIDParserRuleCall_0_1()); }
	ruleQID{ after(grammarAccess.getLiteralAccess().getValueValueQIDParserRuleCall_0_1()); }
)
{ after(grammarAccess.getLiteralAccess().getValueValueCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TrueValue__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrueValueAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getTrueValueAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FalseValue__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFalseValueAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getFalseValueAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


