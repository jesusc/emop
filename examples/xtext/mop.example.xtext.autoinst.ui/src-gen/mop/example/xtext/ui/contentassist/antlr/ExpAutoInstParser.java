/*
* generated by Xtext
*/
package mop.example.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import mop.example.xtext.services.ExpAutoInstGrammarAccess;

public class ExpAutoInstParser extends AbstractContentAssistParser {
	
	@Inject
	private ExpAutoInstGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected mop.example.xtext.ui.contentassist.antlr.internal.InternalExpAutoInstParser createParser() {
		mop.example.xtext.ui.contentassist.antlr.internal.InternalExpAutoInstParser result = new mop.example.xtext.ui.contentassist.antlr.internal.InternalExpAutoInstParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBooleanValueAccess().getAlternatives(), "rule__BooleanValue__Alternatives");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getTrueValueAccess().getGroup(), "rule__TrueValue__Group__0");
					put(grammarAccess.getFalseValueAccess().getGroup(), "rule__FalseValue__Group__0");
					put(grammarAccess.getQIDAccess().getGroup(), "rule__QID__Group__0");
					put(grammarAccess.getQIDAccess().getGroup_0(), "rule__QID__Group_0__0");
					put(grammarAccess.getModuleAccess().getNameAssignment_1(), "rule__Module__NameAssignment_1");
					put(grammarAccess.getModuleAccess().getDeclaredValuesAssignment_2(), "rule__Module__DeclaredValuesAssignment_2");
					put(grammarAccess.getModuleAccess().getExpressionsAssignment_3(), "rule__Module__ExpressionsAssignment_3");
					put(grammarAccess.getLiteralAccess().getValueAssignment(), "rule__Literal__ValueAssignment");
					put(grammarAccess.getTrueValueAccess().getNameAssignment_2(), "rule__TrueValue__NameAssignment_2");
					put(grammarAccess.getFalseValueAccess().getNameAssignment_2(), "rule__FalseValue__NameAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			mop.example.xtext.ui.contentassist.antlr.internal.InternalExpAutoInstParser typedParser = (mop.example.xtext.ui.contentassist.antlr.internal.InternalExpAutoInstParser) parser;
			typedParser.entryRuleModule();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ExpAutoInstGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ExpAutoInstGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
